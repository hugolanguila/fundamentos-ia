;Biblioteca maze-lib.lisp - Versión para descargar.

;Variables propias de esta biblioteca. Favor de no usarse o modificarse dentro de su código.
(defvar *algorithms-list* nil)
(defvar *goal*)
(defvar *start*)
(defvar *solution* nil)
(defvar *exec_time* 100000)
(defvar *num_algorithm* 0)
(defvar *num_laberinto* 0)
(defvar *maze*)

(defclass maze nil 
  ((data
     :initarg :data
     :initform (make-array '(1 1)))
   (start_position
     :initarg :start_position
     :initform #(0 0))
   (goal_position
     :initarg :goal_position
     :initform #(1 1))
   (dimensions
     :initarg :dimensions
     :initform '(5 5))))

(defvar *maze* 
  (make-instance 'maze 
                 :data #2A((5 1 5 3 9 3 9 5 3 9 3 9 3 9 5 3 9 5 5 5 5 5 5 5 3 9 3 13 5 1 5 5 3 13 1 5
     5 1 5 7 9 5 5 5 3)
    (9 6 13 4 6 12 6 9 6 12 17 6 12 6 9 17 2 13 5 5 1 5 3 9 6 12 17 3 9 6 9 5
     17 3 12 3 9 6 9 1 17 5 3 9 6)
    (12 3 9 5 5 3 11 12 3 9 6 13 3 9 6 12 6 9 3 9 6 13 2 10 9 5 16 6 10 9 6 11
     10 12 3 10 12 5 6 12 6 13 4 16 3)
    (9 2 12 3 9 6 8 3 10 10 9 5 4 17 7 9 5 17 6 10 11 9 17 6 12 3 12 3 10 10 13
     2 12 3 10 12 5 1 7 9 5 5 3 10 14)
    (12 16 5 6 10 13 4 17 6 10 12 5 5 6 9 16 5 6 9 16 16 6 10 9 3 12 5 16 6 10
     9 4 3 12 6 9 3 14 9 6 9 3 10 12 3)
    (9 17 5 3 12 5 3 10 9 2 9 5 5 5 6 10 13 3 12 6 8 3 12 6 12 3 9 6 9 6 12 3
     12 3 13 16 4 3 12 3 12 17 6 9 6)
    (12 6 9 6 9 3 10 10 10 14 12 3 9 5 3 12 3 12 5 5 17 2 9 5 7 12 6 11 12 5 5
     6 11 12 3 10 11 12 5 6 9 6 9 16 3)
    (9 5 6 9 6 12 6 12 2 9 5 17 17 5 16 3 12 5 5 3 10 12 2 9 3 9 3 12 1 5 7 9 2
     11 12 6 8 3 13 1 17 7 10 8 6)
    (10 9 7 12 5 3 13 3 10 12 5 6 10 11 10 12 3 9 5 6 12 3 14 10 12 6 12 3 12 3
     9 6 10 10 9 5 17 4 5 2 10 9 6 10 11)
    (12 17 3 9 3 12 3 12 16 5 3 9 6 10 12 5 17 6 9 3 9 17 3 12 5 5 3 12 3 10 12
     5 16 16 6 9 6 9 3 14 12 6 11 12 2)
    (9 4 6 10 14 9 6 9 17 3 10 12 5 16 3 9 16 3 14 10 12 2 12 1 7 9 6 11 12 16
     5 5 6 8 3 12 5 17 6 9 3 9 17 5 6)
    (10 9 5 6 9 6 9 6 10 12 17 5 5 2 10 12 6 12 3 8 5 4 7 8 1 17 7 8 5 2 11 9 1
     6 14 9 5 6 9 6 8 16 6 9 3)
    (12 16 3 9 6 9 17 3 12 3 8 5 7 10 10 9 5 3 10 12 7 9 3 14 8 16 5 16 1 6 8 6
     12 5 3 10 9 3 12 3 12 6 9 6 10)
    (9 4 6 12 5 6 12 16 3 8 6 9 3 12 6 10 11 10 10 9 5 6 12 3 10 12 3 10 12 5
     16 5 5 1 6 12 2 12 1 16 5 3 10 9 6)
    (12 3 9 5 3 11 9 6 10 10 9 6 10 9 5 6 10 12 16 6 9 5 5 16 16 5 17 17 3 11
     10 9 3 14 9 3 12 7 10 12 3 14 10 10 11)
    (9 17 4 3 10 10 12 5 6 10 10 9 16 6 13 1 2 9 6 11 12 3 9 6 14 9 6 10 12 17
     17 6 12 3 10 10 9 3 10 9 17 3 10 10 10)
    (10 10 9 6 8 6 9 3 11 10 12 6 12 5 3 14 12 16 1 0 7 12 6 11 9 6 9 6 11 8 6
     11 9 6 12 17 6 10 8 16 6 12 17 6 10)
    (10 12 16 3 10 9 6 10 12 4 5 5 5 3 12 5 5 6 10 12 5 5 3 8 16 5 16 3 8 6 9 2
     12 3 9 16 5 6 10 12 3 13 17 1 2)
    (10 9 6 10 10 12 3 10 9 5 3 13 5 4 3 9 3 9 17 5 5 3 12 6 12 3 10 12 6 9 16
     6 11 12 6 12 3 9 16 5 16 3 10 10 10)
    (10 12 5 6 14 9 6 12 6 9 6 9 3 13 6 10 12 6 10 11 9 6 9 1 3 12 6 13 5 2 10
     13 0 7 9 5 6 8 6 9 17 16 6 10 10)
    (12 3 11 9 3 12 3 9 3 12 3 10 10 9 5 6 11 9 6 12 6 9 6 12 17 5 1 3 9 16 6 9
     2 9 6 9 3 12 7 10 10 12 5 16 6)
    (13 0 6 10 12 3 12 6 8 5 16 6 8 16 5 3 12 17 1 5 5 16 3 9 6 9 6 10 10 10 13
     2 10 12 5 6 10 9 3 12 16 5 3 12 7)
    (9 17 3 10 11 12 5 3 10 9 6 13 6 12 3 12 5 16 17 3 13 6 12 17 3 10 9 6 10 8
     5 6 12 5 7 9 2 12 16 5 16 3 10 9 3)
    (10 14 12 6 8 5 5 16 6 12 5 5 1 7 12 5 3 12 6 10 9 3 13 2 10 10 12 3 10 14
     9 3 9 3 9 6 14 9 6 11 12 6 12 6 10)
    (12 3 13 5 6 9 3 12 3 9 3 9 17 3 9 5 6 9 3 12 6 10 9 16 6 12 3 12 6 9 6 12
     6 10 10 9 3 10 11 8 3 11 9 5 6)
    (9 6 9 5 3 12 16 3 10 12 16 6 8 6 10 9 5 6 10 11 9 6 10 12 7 9 2 9 3 12 3
     13 1 17 17 6 12 6 10 12 16 17 6 13 3)
    (8 5 17 5 16 1 17 6 12 3 12 3 12 7 12 6 9 3 10 12 17 1 6 9 5 6 10 10 12 5
     16 5 6 10 12 3 9 1 4 7 12 2 11 9 2)
    (10 9 6 9 16 17 6 9 3 12 5 17 3 9 3 11 10 10 10 9 6 12 3 12 3 9 6 12 5 5 6
     9 5 6 9 2 12 17 5 1 3 12 17 6 10)
    (10 10 9 17 6 12 7 12 17 5 3 12 6 10 10 10 12 16 6 12 5 3 10 9 6 14 9 3 9 1
     5 17 3 13 16 2 9 6 9 6 10 9 2 9 6)
    (10 12 17 4 7 9 3 11 12 5 17 5 5 6 10 10 9 6 11 9 5 6 8 6 9 3 10 10 10 14 9
     6 10 9 6 10 10 9 16 3 10 10 14 12 3)
    (12 3 12 3 9 6 12 2 9 5 17 5 3 11 12 16 6 13 2 12 3 9 6 9 6 12 6 10 10 9 6
     13 4 6 13 6 10 10 12 6 12 6 9 3 10)
    (9 4 7 10 12 3 9 6 10 9 6 9 6 8 1 4 3 9 6 9 6 12 3 12 3 9 3 8 4 17 7 9 5 3
     9 5 6 12 5 3 9 5 6 12 6)
    (10 9 3 8 7 10 10 9 6 10 9 6 11 10 12 3 12 2 9 16 3 9 6 9 6 10 12 6 9 2 9 6
     9 6 12 5 5 5 3 10 12 3 9 5 3)
    (10 10 12 17 5 16 6 12 5 6 10 11 8 4 7 12 5 16 6 12 6 10 11 10 9 16 5 3 12
     17 4 7 12 5 3 13 1 5 6 12 5 6 10 9 6)
    (14 12 3 8 3 12 1 7 9 5 17 17 16 5 3 9 3 10 13 3 9 6 10 10 10 14 9 17 3 12
     7 9 5 3 12 3 12 5 5 5 5 5 17 6 11)
    (9 5 6 10 12 3 10 9 6 13 17 0 6 11 12 16 6 12 3 12 17 5 2 10 10 9 6 10 12 5
     5 17 5 6 13 17 1 7 9 5 5 3 10 13 2)
    (10 13 3 12 3 10 12 16 5 3 10 12 5 6 9 6 9 3 12 3 10 9 6 12 6 12 3 8 7 9 5
     6 9 3 9 6 10 9 6 9 3 12 6 9 6)
    (12 3 10 9 6 12 3 12 5 16 6 9 5 3 12 3 12 16 5 16 4 17 5 3 9 5 6 12 5 17 3
     9 16 6 12 3 12 4 3 10 12 5 5 4 3)
    (13 16 0 4 7 9 6 9 5 6 11 12 3 12 3 10 9 6 9 17 3 12 1 4 17 5 3 9 3 10 8 6
     8 5 3 12 3 11 10 10 11 9 5 3 10)
    (9 6 10 9 3 12 3 10 9 5 17 3 12 5 16 6 14 9 16 6 12 3 14 9 6 13 6 10 12 6
     14 9 16 3 12 5 16 0 16 4 2 12 3 10 10)
    (12 3 10 10 12 3 10 12 6 13 4 17 1 7 12 5 3 12 6 13 1 16 3 10 9 3 9 6 13 1
     5 6 14 12 3 9 6 14 12 3 14 9 6 10 10)
    (9 6 14 10 9 6 10 9 5 3 9 17 17 1 7 9 6 13 3 9 6 10 12 17 6 12 6 9 3 12 5 5
     3 9 16 6 11 9 3 12 3 10 9 16 2)
    (10 9 3 10 10 9 4 2 11 10 12 6 10 12 3 12 5 3 8 16 5 16 5 6 9 5 5 16 6 9 3
     9 16 6 10 9 2 10 10 9 6 10 12 6 10)
    (10 10 12 17 6 14 9 16 17 6 9 5 17 1 16 7 9 6 8 17 5 17 3 13 4 5 3 12 3 12
     16 17 16 3 10 10 10 12 16 6 13 17 1 7 10)
    (12 6 13 4 5 5 6 12 4 5 6 13 4 6 12 5 6 13 6 12 5 6 12 5 5 5 6 13 4 5 6 12
     6 12 6 14 12 5 4 5 5 6 12 5 4))
                 :start_position #(0 0)
                 :goal_position #(44 44)))

(setq *start* (slot-value *maze* 'start_position))
(setq *goal* (slot-value *maze* 'goal_position))

(defmacro add-algorithm (algoritmo)
  ;Añade un algoritmo a ejecutar.
  `(setq *algorithms-list* (append *algorithms-list* (list ,algoritmo))))

(defun get-maze-data ()
  ;Obtiene los datos del laberinto
  (slot-value *maze* 'data))

(defun get-cell-walls (x y)
 ;Regresa las paredes de una celda del laberinto.
  (let ((maze_size (array-dimensions (get-maze-data))))
    (cond
      ((and (>= x 0) (< x (nth 0 maze_size)) (>= y 0) (< y (nth 1 maze_size))) 
       (aref (get-maze-data) x y))
      (t (error "Coordenadas fuera de las dimensiones del laberinto.")))))

(defun draw-cell-walls (x y)
  ;Dibuja las paredes del laberinto, solo como referencia.
  (let ((paredes (get-cell-walls x y)))
    (case paredes
      (0 (format t "~%~%~%"))
      (1 (format t "────~%~%"))
      (2 (format t "   │~%   │~%"))
      (3 (format t "───┐~%   │~%"))
      (4 (format t "~%~%────"))
      (5 (format t "────~%~%────"))
      (6 (format t "   │~%   │~%───┘"))
      (7 (format t "───┐~%   │~%───┘"))
      (8 (format t "│~%│~%"))
      (9 (format t "┌───~%│~%"))
      (10 (format t "│  │~%│  │~%"))
      (11 (format t "┌──┐~%│  │~%"))
      (12 (format t "│~%│~%└───"))
      (13 (format t "┌───~%│~%└───"))
      (14 (format t "│  │~%│  │~%└──┘"))
      (15 (format t "┌──┐~%│  │~%└──┘")))))

(defun get-maze-rows ()
;Regresa las filas del laberinto.
  (first (slot-value *maze* 'dimensions)))

(defun get-maze-cols ()
;Regresa las columnas del laberinto
  (second (slot-value *maze* 'dimensions)))

(defun start-maze ()
  ;Función para procesar la línea de comandos.
  (loop for k from 1 below (length *posix-argv*) do
        (eval (read-from-string (nth k *posix-argv*)))))

